type driverError =
  | EvalError(Eval.evalError)
  | InvalidNote(Syntax.value)

exception DriverError(driverError)

// Play the notes generated by a ludwig expression until completion.
// This may not return if the given ludwig expression returns an infinite lazy list
// Might throw 'DriverError' in case the expression gets stuck on a type error
//
// The implementation of `playNote` should play the note in the background and return immediately.
// Once the note has stopped playing, it should call `onComplete`.
let playExpr: (~playNote: (int, Syntax.note, int) => unit, string) => unit
